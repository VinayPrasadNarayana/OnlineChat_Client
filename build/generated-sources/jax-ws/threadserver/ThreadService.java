
package threadserver;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ThreadService", targetNamespace = "http://ThreadServer/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ThreadService {


    /**
     * 
     * @return
     *     returns java.util.List<threadserver.UserThread>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getThreads", targetNamespace = "http://ThreadServer/", className = "threadserver.GetThreads")
    @ResponseWrapper(localName = "getThreadsResponse", targetNamespace = "http://ThreadServer/", className = "threadserver.GetThreadsResponse")
    @Action(input = "http://ThreadServer/ThreadService/getThreadsRequest", output = "http://ThreadServer/ThreadService/getThreadsResponse")
    public List<UserThread> getThreads();

    /**
     * 
     * @param i
     * @return
     *     returns java.util.List<java.lang.Object>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getThreadInfo", targetNamespace = "http://ThreadServer/", className = "threadserver.GetThreadInfo")
    @ResponseWrapper(localName = "getThreadInfoResponse", targetNamespace = "http://ThreadServer/", className = "threadserver.GetThreadInfoResponse")
    @Action(input = "http://ThreadServer/ThreadService/getThreadInfoRequest", output = "http://ThreadServer/ThreadService/getThreadInfoResponse")
    public List<Object> getThreadInfo(
        @WebParam(name = "i", targetNamespace = "")
        Integer i);

    /**
     * 
     * @param edit
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "setisEditing", targetNamespace = "http://ThreadServer/", className = "threadserver.SetisEditing")
    @ResponseWrapper(localName = "setisEditingResponse", targetNamespace = "http://ThreadServer/", className = "threadserver.SetisEditingResponse")
    @Action(input = "http://ThreadServer/ThreadService/setisEditingRequest", output = "http://ThreadServer/ThreadService/setisEditingResponse")
    public String setisEditing(
        @WebParam(name = "edit", targetNamespace = "")
        String edit);

    /**
     * 
     * @param author
     * @param title
     */
    @WebMethod(operationName = "AddThread")
    @RequestWrapper(localName = "AddThread", targetNamespace = "http://ThreadServer/", className = "threadserver.AddThread")
    @ResponseWrapper(localName = "AddThreadResponse", targetNamespace = "http://ThreadServer/", className = "threadserver.AddThreadResponse")
    @Action(input = "http://ThreadServer/ThreadService/AddThreadRequest", output = "http://ThreadServer/ThreadService/AddThreadResponse")
    public void addThread(
        @WebParam(name = "title", targetNamespace = "")
        String title,
        @WebParam(name = "author", targetNamespace = "")
        String author);

    /**
     * 
     * @param i
     * @return
     *     returns java.util.List<java.lang.Object>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getMessagesInfo", targetNamespace = "http://ThreadServer/", className = "threadserver.GetMessagesInfo")
    @ResponseWrapper(localName = "getMessagesInfoResponse", targetNamespace = "http://ThreadServer/", className = "threadserver.GetMessagesInfoResponse")
    @Action(input = "http://ThreadServer/ThreadService/getMessagesInfoRequest", output = "http://ThreadServer/ThreadService/getMessagesInfoResponse")
    public List<Object> getMessagesInfo(
        @WebParam(name = "i", targetNamespace = "")
        Integer i);

    /**
     * 
     * @return
     *     returns java.lang.Integer
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNumOfThreads", targetNamespace = "http://ThreadServer/", className = "threadserver.GetNumOfThreads")
    @ResponseWrapper(localName = "getNumOfThreadsResponse", targetNamespace = "http://ThreadServer/", className = "threadserver.GetNumOfThreadsResponse")
    @Action(input = "http://ThreadServer/ThreadService/getNumOfThreadsRequest", output = "http://ThreadServer/ThreadService/getNumOfThreadsResponse")
    public Integer getNumOfThreads();

    /**
     * 
     * @return
     *     returns java.lang.Integer
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getNumOfMessages", targetNamespace = "http://ThreadServer/", className = "threadserver.GetNumOfMessages")
    @ResponseWrapper(localName = "getNumOfMessagesResponse", targetNamespace = "http://ThreadServer/", className = "threadserver.GetNumOfMessagesResponse")
    @Action(input = "http://ThreadServer/ThreadService/getNumOfMessagesRequest", output = "http://ThreadServer/ThreadService/getNumOfMessagesResponse")
    public Integer getNumOfMessages();

    /**
     * 
     * @param title
     * @return
     *     returns threadserver.UserThread
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "findThread", targetNamespace = "http://ThreadServer/", className = "threadserver.FindThread")
    @ResponseWrapper(localName = "findThreadResponse", targetNamespace = "http://ThreadServer/", className = "threadserver.FindThreadResponse")
    @Action(input = "http://ThreadServer/ThreadService/findThreadRequest", output = "http://ThreadServer/ThreadService/findThreadResponse")
    public UserThread findThread(
        @WebParam(name = "title", targetNamespace = "")
        String title);

    /**
     * 
     */
    @WebMethod
    @RequestWrapper(localName = "resetIsEditing", targetNamespace = "http://ThreadServer/", className = "threadserver.ResetIsEditing")
    @ResponseWrapper(localName = "resetIsEditingResponse", targetNamespace = "http://ThreadServer/", className = "threadserver.ResetIsEditingResponse")
    @Action(input = "http://ThreadServer/ThreadService/resetIsEditingRequest", output = "http://ThreadServer/ThreadService/resetIsEditingResponse")
    public void resetIsEditing();

    /**
     * 
     * @return
     *     returns java.util.List<threadserver.Message>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "returnMessages", targetNamespace = "http://ThreadServer/", className = "threadserver.ReturnMessages")
    @ResponseWrapper(localName = "returnMessagesResponse", targetNamespace = "http://ThreadServer/", className = "threadserver.ReturnMessagesResponse")
    @Action(input = "http://ThreadServer/ThreadService/returnMessagesRequest", output = "http://ThreadServer/ThreadService/returnMessagesResponse")
    public List<Message> returnMessages();

    /**
     * 
     */
    @WebMethod
    @RequestWrapper(localName = "saveThreads", targetNamespace = "http://ThreadServer/", className = "threadserver.SaveThreads")
    @ResponseWrapper(localName = "saveThreadsResponse", targetNamespace = "http://ThreadServer/", className = "threadserver.SaveThreadsResponse")
    @Action(input = "http://ThreadServer/ThreadService/saveThreadsRequest", output = "http://ThreadServer/ThreadService/saveThreadsResponse")
    public void saveThreads();

    /**
     * 
     * @param name
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "hello", targetNamespace = "http://ThreadServer/", className = "threadserver.Hello")
    @ResponseWrapper(localName = "helloResponse", targetNamespace = "http://ThreadServer/", className = "threadserver.HelloResponse")
    @Action(input = "http://ThreadServer/ThreadService/helloRequest", output = "http://ThreadServer/ThreadService/helloResponse")
    public String hello(
        @WebParam(name = "name", targetNamespace = "")
        String name);

    /**
     * 
     * @param author
     * @param message
     */
    @WebMethod
    @RequestWrapper(localName = "createMessage", targetNamespace = "http://ThreadServer/", className = "threadserver.CreateMessage")
    @ResponseWrapper(localName = "createMessageResponse", targetNamespace = "http://ThreadServer/", className = "threadserver.CreateMessageResponse")
    @Action(input = "http://ThreadServer/ThreadService/createMessageRequest", output = "http://ThreadServer/ThreadService/createMessageResponse")
    public void createMessage(
        @WebParam(name = "message", targetNamespace = "")
        String message,
        @WebParam(name = "author", targetNamespace = "")
        String author);

}
